#################################################
#                                               #
#                     POOL                      #
#                                               #
#################################################

pool:
  template:
    - circle
  variables:
    consider_on: >
      [[[
        return entity.state === 'Open' && states['sensor.pool_pump_frequency_level'].state !== 'OFF' && states['sensor.pool_pump_frequency_level'].state !== 'unavailable';
      ]]]
    lights_on: >
      [[[
        return states['light.pool_light'].state === 'on';
      ]]]
    circle_input: >
      [[[
        return states['sensor.pool_fairland_heatpump_inlet_water_temperature'].state / states['number.pool_fairland_heatpump_target_temperature_heating'].state * 100;
      ]]]
    circle_text: >
      [[[
        if (states['sensor.pool_fairland_heatpump_inlet_water_temperature'].state === 'unavailable') return '-';
        return states['sensor.pool_fairland_heatpump_inlet_water_temperature'].state;
      ]]]
    unit: "Â°C"
    icon: mdi:pool
  styles:
    custom_fields:
      icon:
        - color: >
            [[[
              let color = '';
              if (states['binary_sensor.pool_pump_active'].state === 'on') color = 'var(--blue)';
              if (states['sensor.pool_fairland_heatpump_speed_percentage'].state > 0) color = 'var(--orange)';
              if (states['sensor.pool_fairland_heatpump_speed_percentage'].state > 79) color = 'var(--red)';
              return color;
            ]]]
        - animation: '[[[ if (entity.state === "Moving") return "blink 2s ease infinite"; return "none"; ]]]'
    card:
      - background-color: >
          [[[
            if (variables.lights_on) return 'rgba(255, 187, 62, 0.5)';
            return variables.consider_on ? 'rgba(255, 255, 255, 0.8)' : 'rgba(115, 115, 115, 0.4)';
          ]]]
  tap_action:
    !include ../../dashboards/popups/pp_pool_garden.yaml
  state_display: >
    [[[
      return `<span style="font-size: 1rem">${entity.state} (ph: ${states['sensor.eps_pool_ph_level'].state}, orp: ${Number.parseFloat(states['sensor.eps_pool_rx_level'].state).toFixed(0)})</span>`;
    ]]]



icon_fan:
  styles:
    custom_fields:
      icon:
        - width: 75%
        - margin-left: -3%
  custom_fields:
    icon: >
      [[[
        let path = `
          <circle cx="25" cy="25" r="6.6"/>
          <path d="M31.9 30.4c-.5.6-1.1 1.1-1.7 1.5-1.4 1.1-3.2 1.7-5.2 1.7-2.3 0-4.5-.9-6-2.4-.9 1.1-1.6 2.3-2.3 3.2l-4.9 5.4c-1.8 2.7.3 5.6 2.5 7 3.9 2.4 9.8 3.1 14.1 1.9 4.6-1.3 7.9-4.7 7.4-9.7-.2-3.4-1.9-6-3.9-8.6zM17 28.3c-.4-1-.6-2.1-.6-3.3a8.7 8.7 0 0 1 6.4-8.4l-1.6-3.5L19 6.2c-1.5-2.8-5-2.5-7.3-1.2-4 2.2-7.5 6.9-8.7 11.3-1.2 4.6.2 9.2 4.7 11.3 3.1 1.3 6.1 1.2 9.3.7zm26.9-17.6c-3.3-3.4-8-4.6-12.1-1.8-2.8 1.8-4.2 4.6-5.5 7.5 4.2.6 7.4 4.2 7.4 8.6 0 .9-.1 1.7-.4 2.5 1.3.2 2.8.3 3.8.4 2.3.4 4.7 1.3 7.1 1.7 3.2.3 4.7-3 4.8-5.6.3-4.6-1.9-10.1-5.1-13.3z"/>
        `,
        style = `
          <svg viewBox="0 0 50 50">
            <style>
              @keyframes rotate {
                0% {
                  visibility: visible;
                  transform: rotate(0deg) translateZ(0);
                }
                100% {
                  transform: rotate(1080deg) translateZ(0);
                }
              }
              .start {
                animation: rotate 2.8s ease-in;
                transform-origin: center;
                fill: #5daeea;
                visibility: hidden;
                will-change: transform;
              }
              .on {
                animation: rotate 1.8s linear infinite;
                transform-origin: center;
                fill: #5daeea;
                animation-delay: 2.8s;
                visibility: hidden;
                will-change: transform;
              }
              .end {
                animation: rotate 2.8s;
                transform-origin: center;
                fill: #9ca2a5;
                animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                will-change: transform;
              }
              .start_timeout {
                animation: rotate 1.8s linear infinite;
                transform-origin: center;
                fill: #5daeea;
                visibility: hidden;
                will-change: transform;
              }
              .end_timeout {
                fill: #9ca2a5;
              }
            </style>
        `;
        if (variables.state_on && variables.timeout < 2000) {
          return `${style}<g class="start">${path}</g><g class="on">${path}</g></svg>`;
        }
        if (variables.state === 'off' && variables.timeout < 2000) {
          return `${style}<g class="end">${path}</g></svg>`;
        }
        if (variables.state_on && variables.timeout > 2000) {
          return `${style}<g class="start_timeout">${path}</g></svg>`;
        } else {
          return `${style}<g class="end_timeout">${path}</g></svg>`;
        }
      ]]]