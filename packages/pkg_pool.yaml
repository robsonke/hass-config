#  ____             _
# |  _ \ ___   ___ | |
# | |_) / _ \ / _ \| |
# |  __/ (_) | (_) | |
# |_|   \___/ \___/|_|
#
# Author: Rob Sonke
# https://github.com/robsonke/hass-config
#
template:
  - binary_sensor:
    - unique_id: pool_pump_active
      attributes:
        friendly_name: Pool Pump Active
      state: >
        {{ states('sensor.pool_shelly_3em_phase_b_active_power') | float > 20 }}

  - sensor:
    - name: "Pool Pump Frequency Level"
      icon: mdi:fan-chevron-down
      unique_id: pool_pump_frequency_level
      state: >
        {% set pumpPower = states('sensor.pool_shelly_3em_phase_b_active_power') | float(default=0) %}
        {% if pumpPower > 800 %}
          FULL (3)
        {% elif pumpPower > 680 and pumpPower < 775 %}
          NORMAL (2)
        {% elif pumpPower > 520 and pumpPower < 620 %}
          LOW (1)
        {% else %}
          OFF
        {% endif %}

  - sensor:
    - name: "Pool Deck Status"
      icon: mdi:fit-to-screen
      unique_id: pool_deck_status
      state: >
        {% if is_state('binary_sensor.pool_deck_open', 'on') %}
          Open
        {% elif is_state('binary_sensor.pool_deck_closed', 'on') %}
          Closed
        {% else %}
          Moving
        {% endif %}

# en/disable all automations for pool
input_boolean:
  enable_pool_automations:
    name: Enable Pool Automations
    icon: mdi:swim

input_button:
  pool_light_program_next:
    name: Pool Light Next Program
    icon: mdi:arrow-right
  pool_light_program_previous:
    name: Pool Light Previous Program
    icon: mdi:arrow-left

input_select:
  pool_light_program_options:
    name: Pool Light Programs
    options:
      - 01. Deep Blue Sea
      - 02. Daylight Blue
      - 03. Sunset
      - 04. Love Is In The Air
      - 05. Forest Spring
      - 06. Think Pink
      - 07. Sunshine
      - 08. Jungle Beach
      - 09. Voodoo
      - 10. Disco
      - 11. Party
      - 12. Warm White
      - 13. Neutral White
      - 14. Sun White
    icon: mdi:palette

# input_number:
#   pool_light_brightness:
#     name: Pool Light Brightness
#     min: 0
#     max: 100
#     step: 1
#   pool_light_temperature:
#     name: Pool Light Temperature
#     min: 1000
#     max: 25000
#     step: 500

# Use scripts to update both the helpers and call the esphome device
# script:
#   pool_light_set_brightness:
#     description: "Change the brightness of the pool lights"
#     fields:
#       command:
#         description: "The brightness command, PDxxx where xxx represents a percentage"
#         example: "PD100"
#       value:
#         description: "The brightness value between 0 and 100"
#         example: "100"
#     sequence:
#       - service: esphome.m5stickc_pool_lights_send_uart_command
#         data:
#           command: "{{ command }}"
#       - service: input_number.set_value
#         data:
#           value: "{{ value }}"
#         target:
#           entity_id: input_number.pool_light_brightness


# and combine this into a light template
light:
  - platform: template
    lights:
      pool_light:
        friendly_name: "Pool Light"
        unique_id: pool_light
        #level_template: "{{ states.input_number.pool_light_brightness.state|int }}"
        value_template: "{{ states.light.m5stickc_pool_lights_pool_lights.state }}"
        # temperature_template: "{{states.input_number.pool_light_temperature.state | int}}"
        effect_list_template: "{{ state_attr('input_select.pool_light_program_options', 'options') }}"
        effect_template: "{{ states.input_select.pool_light_program_options.state }}"
        turn_on:
          service: light.turn_on
          target:
            entity_id: light.m5stickc_pool_lights_pool_lights
        turn_off:
          service: light.turn_off
          target:
            entity_id: light.m5stickc_pool_lights_pool_lights
        set_level:
          service: esphome.m5stickc_pool_lights_send_uart_command
          #service: script.pool_light_set_brightness
          data_template:
            command: >-
              PD{{ '%03d' % (brightness / 255 * 100) | float | round(0) }}
            # value: >- 
            #   {{ (brightness / 255 * 100) | float | round(0) }}
        set_rgb:
          service: esphome.m5stickc_pool_lights_set_color
          data:
            color: "PC{{ '%03d' % r }}{{ '%03d' % g }}{{ '%03d' % b }}"
        # set_temperature:
        #   service: esphome.m5stickc_pool_lights_send_uart_command
        #   data_template:
        #     command: >-
        #       PT{{ (color_temp * 50 + 500 ) | float | round(0) }}
        set_effect:
          - service: esphome.m5stickc_pool_lights_send_uart_command
            data_template:
              command: PS{{ effect[:2] }}

sensor:
  # Warmtepomp
  - platform: integration
    source: sensor.pool_shelly_3em_phase_a_active_power
    name: Pool Shelly 3EM Phase A Heatpump Energy Usage
    unique_id: pool_shelly_3em_phase_a_heatpump_energy_usage
    method: left
    unit_prefix: k
    round: 2
  - platform: integration
    source: sensor.pool_shelly_3em_phase_b_active_power
    name: Pool Shelly 3EM Phase B Pump Energy Usage
    unique_id: pool_shelly_3em_phase_b_pump_energy_usage
    method: left
    unit_prefix: k
    round: 2
  - platform: integration
    source: sensor.pool_shelly_3em_phase_c_active_power
    name: Pool Shelly 3EM Phase C Lights Energy Usage
    unique_id: pool_shelly_3em_phase_c_lights_energy_usage
    method: left
    unit_prefix: k
    round: 2

lock:
  - platform: template
    unique_id: aquadeck_rol_dek
    name: Aquadeck rol dek
    value_template: "{{ is_state('switch.pool_deck_lock', 'on') }}"
    lock:
      service: switch.turn_on
      target:
        entity_id: switch.pool_deck_lock
    unlock:
      service: switch.turn_off
      target:
        entity_id: switch.pool_deck_lock

# pool eps one touch scrapers
command_line:
  - sensor:
      command: !secret pool_scrape_ph
      name: Pool Ph Value
      unit_of_measurement: "Ph"
      scan_interval: 120
      command_timeout: 60
      unique_id: pool_ph_value
  - sensor:
      name: Pool Redox Value
      command: !secret pool_scrape_redox
      unit_of_measurement: "mV"
      scan_interval: 120
      command_timeout: 60
      unique_id: pool_redox_value
  # - sensor:
  #     name: Pool Flow Value
  #     command: !secret pool_scrape_flow
  #     scan_interval: 120
  #     command_timeout: 60
  #     unique_id: pool_flow_value
  #     value_template: >
  #       {% if value == "Flow Ok" %}
  #         {{ true }}
  #       {% else %}
  #         {{ false }}
  #       {% endif %}
  - sensor:
      command: !secret pool_scrape_target_ph
      name: Pool Ph Target Value
      unit_of_measurement: "Ph"
      scan_interval: 3600
      command_timeout: 60
      unique_id: pool_ph_target_value
  - sensor:
      name: Pool Redox Target Value
      command: !secret pool_scrape_target_redox
      unit_of_measurement: "mV"
      scan_interval: 3600
      command_timeout: 60
      unique_id: pool_redox_target_value