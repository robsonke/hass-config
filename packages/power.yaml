
#
# Author: Rob Sonke
# https://github.com/robsonke/hass-config
#

template:
- sensor:
  - unique_id: daily_consumption_energy
    attributes:
      friendly_name: "Daily Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    state: "{{ states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float }}"
  - unique_id: monthly_consumption_energy
    attributes:
      friendly_name: "Monthly Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    state: "{{ states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float }}"
  - unique_id: yearly_consumption_energy
    attributes:
      friendly_name: "Yearly Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    state: "{{ states('sensor.yearly_energy_offpeak')|float + states('sensor.yearly_energy_peak')|float }}"
  - unique_id: net_power_consumption
    attributes:
      friendly_name: "Net Power Consumption"
      icon: "mdi:home-lightning-bolt-outline"
    unit_of_measurement: kW
    device_class: power
    state_class: measurement
    state: "{{ states('sensor.solaredge_modbus')|float(default=0) / 1000 - states('sensor.power_produced')|float(default=0) + states('sensor.power_consumed')|float(default=0) }}"
  # same sensor but with other unit of measurement
  - unique_id: power_consumption_watt
    attributes:
      friendly_name: Power Consumption Watt
    unit_of_measurement: 'W'
    state: "{{ states('sensor.power_consumption') | float(default=0) * 1000 | round(0) }}"
  # convert the uptime one to a real value
  - unique_id: ha_uptime
    attributes:
      friendly_name: 'HA uptime minutes'
    icon: mdi:arrow-up-circle-outline
    state: >
      {{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'), 0)) / 60 }}

  - name: "Current Price Electricity"
    unique_id: current_price_electricity
    unit_of_measurement: "EUR/kWh"
    attributes:
      excl_tax: >
        {{ states('sensor.nordpool_kwh_nl_eur_3_10_021') | float(default=0.3) }}
      incl_tax: >
        {{ (states('sensor.nordpool_kwh_nl_eur_3_10_021') | float(default=0.3) + 0.12599) * 1.21 }}
      avg_price: >
        {{ (state_attr('sensor.nordpool_kwh_nl_eur_3_10_021', 'average') + 0.12599) * 1.21 }}
    state: >
      {{ (states('sensor.nordpool_kwh_nl_eur_3_10_021') | float(default=0.3) + 0.12599) * 1.21 }}
  
  - name: "Electricity Cost Today"
    unique_id: electricity_cost_today
    unit_of_measurement: "EUR"
    state: >
      {{ states.sensor.accumulated_cost_langeweide.state | float - states.sensor.accumulated_reward_langeweide.state | float }}

  - name: "Energy Price Level"
    unique_id: energy_price_level
    attributes:
      percentage: >
        {{ states('sensor.current_price_electricity') | float(default=0.3) / state_attr('sensor.current_price_electricity','avg_price') | float(default=0.3) * 100 }}
    state: >
      {% set percentage = states('sensor.current_price_electricity') | float(default=0.3) / state_attr('sensor.current_price_electricity','avg_price') | float(default=0.3) * 100 %}
      {# In case it's less then 20 cents, we still consider it cheap #}
      {% if states('sensor.current_price_electricity') | float(default=0.3) < 0.1 %}
        {{ "very_cheap" }}
      {% elif percentage <= 60 %}
        {{ "very_cheap" }}
      {% elif percentage <= 90 and percentage > 60 %}
        {{ "cheap" }}
      {% elif percentage <= 115 and percentage > 90 %}
        {{ "normal" }}
      {% elif percentage <= 140 and percentage > 115 %}
        {{ "expensive" }}
      {% elif percentage > 140 %}
        {{ "very_expensive" }}
      {% else %}
        {{ "normal" }}
      {% endif %}
  
  - name: Cheapest 8 Hours 24h
    unique_id: cheapest_8_hours_24h
    attributes:
      friendly_name: Cheapest 8 Hours 24h
    state: >-
      {%- set ns = namespace(hour_price=[], cheapest_hour=False) %}
      {%- set cheap_hours = namespace(number=8) %}
      {% for i in range(0, 23) %} 
        {% set ns.hour_price = ns.hour_price + [(i, states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_today[i].value)] %}
      {%- endfor -%}
      {% set hour_price_dict = dict.from_keys(ns.hour_price) %}
      {% set sorted_hour_price_dict = hour_price_dict.items()|sort(attribute='1') %}
      {% for i in range(0, cheap_hours.number) if not ns.cheapest_hour %}
        {% if sorted_hour_price_dict[i].0 == now().hour %}
          {% set ns.cheapest_hour = true %}
        {% else %}
          {% set ns.cheapest_hour = false %}
        {% endif %}
      {%- endfor -%}
      {{ ns.cheapest_hour }}
  - name: Cheapest 12 Hours 24h
    unique_id: cheapest_12_hours_24h
    attributes:
      friendly_name: Cheapest 12 Hours 24h
    state: >-
      {%- set ns = namespace(hour_price=[], cheapest_hour=False) %}
      {%- set cheap_hours = namespace(number=12) %}
      {% for i in range(0, 23) %} 
        {% set ns.hour_price = ns.hour_price + [(i, states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_today[i].value)] %}
      {%- endfor -%}
      {% set hour_price_dict = dict.from_keys(ns.hour_price) %}
      {% set sorted_hour_price_dict = hour_price_dict.items()|sort(attribute='1') %}
      {% for i in range(0, cheap_hours.number) if not ns.cheapest_hour %}
        {% if sorted_hour_price_dict[i].0 == now().hour %}
          {% set ns.cheapest_hour = true %}
        {% else %}
          {% set ns.cheapest_hour = false %}
        {% endif %}
      {%- endfor -%}
      {{ ns.cheapest_hour }}
  - name: Cheapest 16 Hours 24h
    unique_id: cheapest_16_hours_24h
    attributes:
      friendly_name: Cheapest 16 Hours 24h
    state: >-
      {%- set ns = namespace(hour_price=[], cheapest_hour=False) %}
      {%- set cheap_hours = namespace(number=16) %}
      {% for i in range(0, 23) %} 
        {% set ns.hour_price = ns.hour_price + [(i, states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_today[i].value)] %}
      {%- endfor -%}
      {% set hour_price_dict = dict.from_keys(ns.hour_price) %}
      {% set sorted_hour_price_dict = hour_price_dict.items()|sort(attribute='1') %}
      {% for i in range(0, cheap_hours.number) if not ns.cheapest_hour %}
        {% if sorted_hour_price_dict[i].0 == now().hour %}
          {% set ns.cheapest_hour = true %}
        {% else %}
          {% set ns.cheapest_hour = false %}
        {% endif %}
      {%- endfor -%}
      {{ ns.cheapest_hour }}
  - name: Average price today
    unique_id: average_price_today
    icon: mdi:lightning-bolt
    attributes:
      friendly_name: Average price today
    state: >-
      {{ (((states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_today | sum(attribute='value') / states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_today | count) + 0.12599) * 1.21) | round(2, 'floor') }}
  - name: Average price tomorrow
    unique_id: average_price_tomorrow
    icon: mdi:lightning-bolt
    attributes:
      friendly_name: Average price tomorrow
    state: >-
      {% set sumTomorrow = states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_tomorrow | sum(attribute='value') | float(default=0) %}
      {% set countTomorrow = states.sensor.nordpool_kwh_nl_eur_3_10_021.attributes.raw_tomorrow | count %}
      {% if countTomorrow == 0 %}
        {{ "-" }}
      {% else %}
        {{ (((sumTomorrow / countTomorrow) + 0.12599) * 1.21) | round(2, 'floor') }}
      {% endif %}