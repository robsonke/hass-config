#  _____                    _       _
# |_   _|__ _ __ ___  _ __ | | __ _| |_ ___  ___
#   | |/ _ \ '_ ` _ \| '_ \| |/ _` | __/ _ \/ __|
#   | |  __/ | | | | | |_) | | (_| | ||  __/\__ \
#   |_|\___|_| |_| |_| .__/|_|\__,_|\__\___||___/
#                    |_|
# Author: Rob Sonke
# https://github.com/robsonke/hass-config
#

template:
- sensor:
  - unique_id: hacs_version
    state: >
      {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}
    attributes:
      friendly_name: HACS Version

- sensor:
  - unique_id: paper_days_until_collection
    state: "{{ state_attr('sensor.afvalinfo_papier', 'days_until_collection_date') | int(default=0) }}"
    attributes:
      friendly_name: papier bak
      short_name: papier
      color: '#3182b7'
      intstate: "{{ state_attr('sensor.afvalinfo_papier', 'days_until_collection_date') | int(default=0) }}"
      text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_papier', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else 'Over %s dagen'%stateInt }}
      short_text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_papier', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else '%s d'%stateInt }}
    icon: mdi:trash-can
  - unique_id: gft_days_until_collection
    state: "{{ state_attr('sensor.afvalinfo_gft', 'days_until_collection_date') | int(default=0) }}"
    attributes:
      friendly_name: GFT bak
      short_name: gft
      color: 'green'
      intstate: "{{ state_attr('sensor.afvalinfo_gft', 'days_until_collection_date') | int(default=0) }}"
      text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_gft', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else 'Over %s dagen'%stateInt }}
      short_text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_gft', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else '%s d'%stateInt }}
    icon: mdi:trash-can
  - unique_id: rest_days_until_collection
    state: "{{ state_attr('sensor.afvalinfo_restafval', 'days_until_collection_date') | int(default=0) }}"
    attributes:
      friendly_name: grijze bak
      short_name: rest
      color: grey
      intstate: "{{ state_attr('sensor.afvalinfo_restafval', 'days_until_collection_date') | int(default=0) }}"
      text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_restafval', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else 'Over %s dagen'%stateInt }}
      short_text: |
        {% set names = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
        {% set stateInt = state_attr('sensor.afvalinfo_restafval', 'days_until_collection_date') | int(default=0) %}
        {{ names[stateInt] if stateInt < names | length else '%s d'%stateInt }}
    icon: mdi:trash-can

- sensor:
  - unique_id: sidebar_time
    state: template
    attributes:
      time: >
        {% set hours = now().strftime('%H') %}
        {% set minutes = now().strftime('%M') %}
        <span class="time">
          {{ hours }}<span class="time-colon">:</span>{{ minutes }}
        </span>
      date: |
        <b>
        {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
        {%- set days = ['Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag', 'Zondag'] %}
        {%- set months = ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 
        'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'] %}
          {{- days[now().weekday()] }}, {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
        {%- endif -%}
        </b>

- sensor:
  - unique_id: water_meter_total_m3
    attributes:
      friendly_name: Water Meter Total m3
    state_class: measurement
    unit_of_measurement: mÂ³
    state: "{{ states('counter.watermeter_consumption_counter') |float * 0.001 }}"
    icon: mdi:water-pump

# important entities
- trigger:
  - platform: time_pattern
    minutes: "*"
  sensor:
  - unique_id: unavailable_entities
    attributes:
      friendly_name: "Unavailable Entities"
      count: "{{ expand('group.monitored_entities') | rejectattr('state', 'equalto', '') | selectattr('state', 'in', ['unavailable', 'unknown', 'none']) | list | count }}"
    state_class: measurement
    unit_of_measurement: entities
    state: "{{ expand('group.monitored_entities') | rejectattr('state', 'equalto', '') | selectattr('state', 'in', ['unavailable', 'unknown', 'none']) | join(', ', attribute='attributes.friendly_name') | truncate(252) or 'Online' }}"

# all unavailable entities
- trigger:
  - platform: time_pattern
    minutes: "/5"
  sensor:
    - unique_id: all_unavailable_entities
      unit_of_measurement: entities
      state: >
        {% if state_attr('sensor.all_unavailable_entities','entities') | lower not in ['unknown','unavailable','none'] %}
          {{ state_attr('sensor.all_unavailable_entities','entities') | count }}
        {% endif %}
      attributes:
        friendly_name: "All Unavailable Entities"
        entities: >
          {% set ignore_time = 15 %}
          {% set unavail = namespace(entities=[]) %}
          {% set entities = states|rejectattr('domain','eq','group')
            |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))
            |rejectattr('state', 'equalto', '')
            |selectattr('state','in',['unavailable','unknown','none'])|map(attribute='entity_id')|list %}
          {% for item in entities %}
            {% if item != "None" and states[item].last_changed.timestamp() < now().timestamp() - ignore_time %}
              {% set unavail.entities = unavail.entities + [item] %}
            {% endif %}
          {% endfor %}
          {{ unavail.entities }}

- binary_sensor:
  - unique_id: people_home_and_awake
    attributes:
      friendly_name: People home and awake
    state: >
      {{ ( states('zone.home') | int(default=0) > 0 or is_state('input_boolean.guest_mode', 'on') )
          and is_state('alarm_control_panel.alarmo', 'disarmed') }}

# count all possible updates to one sensor
- trigger:
  - platform: time_pattern
    minutes: "*"
  sensor:
  - unique_id: ha_all_updates
    attributes:
      friendly_name: All Updates
      updates: >
        <ul>
        {%- for entity in expand(states.update) %}
          {%- if is_state(entity.entity_id, 'on') %}
            <li>
              {%- if state_attr(entity.entity_id, 'release_url') is not none %}
              <b><a href="#" onclick="window.open('{{ state_attr(entity.entity_id, 'release_url') }}');">{{ state_attr(entity.entity_id, 'friendly_name') }}</a></b> 
              {%- else %}
              <b>{{ state_attr(entity.entity_id, 'friendly_name') }}</b> 
              {%- endif %}
              {{ state_attr(entity.entity_id, 'installed_version') }} &#10142; {{ state_attr(entity.entity_id, 'latest_version') }}
              <ha-icon-button onclick="cardTools.hass.callService('browser_mod', 'close_popup', {}); cardTools.moreInfo('{{ entity.entity_id }}')"><ha-icon style="--mdc-icon-size: 24px; vertical-align: 100%;" icon="mdi:cloud-download"></ha-icon></ha-icon-button>
            </li>
          {%- endif %}
        {%- endfor %}
        </ul>
    icon: mdi:update
    state: >
      {{ expand(states.update) | selectattr('state', 'in', ['on']) | list | count }}
    unit_of_measurement: "Update(s)"

- sensor:
  - unique_id: open_windows_and_doors_upstairs
    attributes:
      friendly_name: Open windows and doors upstairs
    state: >
      {{ expand('group.doors_and_windows_upstairs') | selectattr('state', 'in', ['on']) | list | count }}
  - unique_id: open_windows_and_doors_downstairs
    attributes:
      friendly_name: Open windows and doors downstairs
    state: >
      {{ expand('group.doors_and_windows_downstairs') | selectattr('state', 'in', ['on']) | list | count }}
  - unique_id: open_windows_and_doors_garden
    attributes:
      friendly_name: Open windows and doors garden
    state: >
      {{ expand('group.doors_and_windows_garden') | selectattr('state', 'in', ['on']) | list | count }}
  - unique_id: open_windows_and_doors
    attributes:
      friendly_name: Open windows and doors
    state: >
      {{ states('sensor.open_windows_and_doors_upstairs') | int(default=0) + states('sensor.open_windows_and_doors_downstairs') | int(default=0) + states('sensor.open_windows_and_doors_garden') | int(default=0) }}
    
- sensor:
  - name: "Today Maximum Temperature"
    icon: mdi:thermometer
    unique_id: today_maximum_temperature
    state: >
      {{ states.weather.openweathermap.attributes.forecast[0].temperature | float(default=20) }}

# Regular counters
- sensor:
  - unique_id: count_automations
    attributes:
      friendly_name: Automations count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.automation | count }}
  - unique_id: count_device_trackers
    attributes:
      friendly_name: Device Trackers count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.device_tracker | count }}
  - unique_id: count_lights
    attributes:
      friendly_name: Lights count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.light | count }}
  - unique_id: count_binary_sensors
    attributes:
      friendly_name: Binary Sensors count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.binary_sensor | count }}
  - unique_id: count_sensors
    attributes:
      friendly_name: Sensors count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.sensor | count }}
  - unique_id: count_switches
    attributes:
      friendly_name: Switches count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.switch | count }}
  - unique_id: count_zones
    attributes:
      friendly_name: Zone count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.zone | count }}
  - unique_id: count_cameras
    attributes:
      friendly_name: Camera count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.camera | count }}
  - unique_id: count_media_players
    attributes:
      friendly_name: Media Players count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.media_player | count }}
  - unique_id: count_scripts
    attributes:
      friendly_name: Scripts count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.script | count }}
  - unique_id: count_locks
    attributes:
      friendly_name: Locks count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.lock | count }}
  - unique_id: count_vacuums
    attributes:
      friendly_name: Vacuum count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.vacuum | count }}
  - unique_id: count_zwaves
    attributes:
      friendly_name: ZWave count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.zwave | count }}
