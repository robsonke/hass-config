#  _____                    _       _
# |_   _|__ _ __ ___  _ __ | | __ _| |_ ___  ___
#   | |/ _ \ '_ ` _ \| '_ \| |/ _` | __/ _ \/ __|
#   | |  __/ | | | | | |_) | | (_| | ||  __/\__ \
#   |_|\___|_| |_| |_| .__/|_|\__,_|\__\___||___/
#                    |_|
# Author: Rob Sonke
# https://github.com/robsonke/hass-config
#

- sensor:
  - unique_id: hacs_version
    state: >
      {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}

- sensor:
  - unique_id: sidebar
    state: template
    attributes:
      time: >
        {% set hours = now().strftime('%H') %}
        {% set minutes = now().strftime('%M') %}
        <span class="time">
          {{ hours }}<span class="time-colon">:</span>{{ minutes }}
        </span>
      date: |
        <font color='#6a7377'><b>
        {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
        {%- set days = ['Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag', 'Zondag'] %}
        {%- set months = ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 
        'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'] %}
          {{- days[now().weekday()] }}, {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
        {%- endif -%}
        </b></font>
      trash: >
        {% if "Vandaag" in states('sensor.groene_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon> Vandaag groene bak aan de straat {% endif %}
        {% if "Vandaag" in states('sensor.papier_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon>Vandaag papierbak aan de straat {% endif %}
        {% if "Vandaag" in states('sensor.grijze_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon>Vandaag grijze bak aan de straat {% endif %}
        {% if "Morgen" in states('sensor.groene_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon>Morgen groene bak aan de straat {% endif %}
        {% if "Morgen" in states('sensor.papier_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon>Morgen papierbak aan de straat {% endif %}
        {% if "Morgen" in states('sensor.grijze_bak_dag') %} <ha-icon icon="mdi:trash-can-outline" class="trash"></ha-icon>Morgen grijze bak aan de straat {% endif %}

# Trash can sensors
- trigger:
    - platform: time_pattern
      minutes: "/5"
  sensor:
    unique_id: groene_bak
    name: Groene Bak dag
    icon: mdi:trash-can
    state: >
      {% set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}
      {% set event = state_attr('calendar.groenebak', 'start_time') | as_timestamp %}
      {% set delta = ((event - midnight) // 86400) | int %}
      {% set values = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
      {{ values[delta] if delta < values | length else 'Over %s dagen'%delta }}
- trigger:
    - platform: time_pattern
      minutes: "/5"
  sensor:
    unique_id: grijze_bak
    name: Grijze Bak dag
    icon: mdi:trash-can
    state: >
      {% set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}
      {% set event = state_attr('calendar.grijzebak', 'start_time') | as_timestamp %}
      {% set delta = ((event - midnight) // 86400) | int %}
      {% set values = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
      {{ values[delta] if delta < values | length else 'Over %s dagen'%delta }}
- trigger:
    - platform: time_pattern
      minutes: "/5"
  sensor:
    unique_id: papier_bak
    name: Papier Bak dag
    icon: mdi:trash-can
    state: >
      {% set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}
      {% set event = state_attr('calendar.papierbak', 'start_time') | as_timestamp %}
      {% set delta = ((event - midnight) // 86400) | int %}
      {% set values = [ 'Vandaag', 'Morgen', 'Overmorgen' ] %}
      {{ values[delta] if delta < values | length else 'Over %s dagen'%delta }}

# important entities
- sensor:
  - unique_id: unavailable_entities
    name: "Unavailable Entities"
    state_class: measurement
    unit_of_measurement: entities
    state: "{{ expand('group.monitored_entities') | rejectattr('state', 'equalto', '') |selectattr('state', 'in', ['unavailable', 'unknown', 'none']) | join(', ', attribute='attributes.friendly_name') | truncate(252) or 'Online' }}"

# all unavailable entities
- trigger:
  - platform: time_pattern
    minutes: "*"
  sensor:
    unique_id: all_unavailable_entities
    name: "All Unavailable Entities"
    unit_of_measurement: entities
    state: >
      {% if states('sensor.all_unavailable_entities') and state_attr('sensor.all_unavailable_entities','entities') | lower not in ['unknown','unavailable','none'] %}
        {{ state_attr('sensor.all_unavailable_entities','entities')|count }}
      {% endif %}
    attributes:
      entities: >
        {% set ignore_time = 15 %}
        {% set unavail = namespace(entities=[]) %}
        {% set entities = states|rejectattr('domain','eq','group')
          |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))
          |rejectattr('state', 'equalto', '')
          |selectattr('state','in',['unavailable','unknown','none'])|map(attribute='entity_id')|list %}
        {% for item in entities %}
          {% if states[item].last_changed.timestamp() < now().timestamp() - ignore_time %}
            {% set unavail.entities = unavail.entities + [item] %}
          {% endif %}
        {% endfor %}
        {{ unavail.entities }}

- binary_sensor:
  - name: People home and awake
    state: >
      {{ ( is_state('person.rob', 'home')
            or is_state('person.steffi', 'home')
            or is_state('input_boolean.guest_mode', 'on')
          )
          and is_state('alarm_control_panel.alarmo', 'disarmed') }}

- sensor:
  # same sensor but with other unit of measurement
  - unique_id: power_consumption_watt
    name: Power Consumption Watt
    unit_of_measurement: 'W'
    state: "{{ states('sensor.power_consumption') | float * 1000 | round(0) }}"
  # convert the uptime one to a real value
  - unique_id: ha_uptime
    name: 'HA uptime minutes'
    icon: mdi:arrow-up-circle-outline
    state: >
      {{ (as_timestamp(now()) - as_timestamp(states('sensor.uptime'))) / 60 }}

# count all possible updates to one sensor
- trigger:
  - platform: time_pattern
    minutes: "*"
  sensor:
  - unique_id: ha_all_updates
    name: All Updates
    icon: mdi:update
    state: >
      {% set count = namespace(value=0) %}
      {% set count.value = count.value + states('sensor.supervisor_updates') | int %}
      {% if states('sensor.hass_version_latest') != states('sensor.hass_version_installed') %}
        {% set count.value = count.value + 1 %}
      {% endif %}
      {% if state_attr('sensor.supervisor_updates', 'update_available') %}
        {% set count.value = count.value + 1 %}
      {% endif %}
      {% set count.value = count.value + (state_attr('sensor.hacs', 'repositories') | length) %}
      {{ count.value }}
    unit_of_measurement: "Update(s)"


- sensor:
  - unique_id: daily_consumption_energy
    name: "Daily Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: measurement
    state: "{{ states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float }}"
  - unique_id: monthly_consumption_energy
    name: "Monthly Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: measurement
    state: "{{ states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float }}"
  - unique_id: yearly_consumption_energy
    name: "Yearly Consumption Energy"
    unit_of_measurement: kWh
    device_class: energy
    state_class: measurement
    state: "{{ states('sensor.yearly_energy_offpeak')|float + states('sensor.yearly_energy_peak')|float }}"

- sensor:
  - unique_id: open_windows_and_doors_upstairs
    name: Open windows and doors upstairs
    state: >
      {% set sensors = [states.binary_sensor.window_atticroom_openclose_sensor,
                        states.binary_sensor.window_evaroom_openclose_sensor,
                        states.binary_sensor.window_masterbed_1_openclose_sensor,
                        states.binary_sensor.window_masterbed_2_openclose_sensor,
                        states.binary_sensor.window_guestroom_openclose_sensor] %}
      {{ sensors | selectattr('state', 'eq', 'on') | list | count }}
  - unique_id: open_windows_and_doors_downstairs
    name: Open windows and doors downstairs
    state: >
      {% set sensors = [states.binary_sensor.backdoor_openclose_sensor,
                        states.binary_sensor.frontdoor_openclose_sensor,
                        states.binary_sensor.sheddoor_openclose_sensor,
                        states.binary_sensor.windowdoor_ground_1_openclose_sensor,
                        states.binary_sensor.windowdoor_ground_2_openclose_sensor,
                        states.binary_sensor.windowdoor_ground_3_openclose_sensor,
                        states.binary_sensor.windowdoor_ground_4_openclose_sensor,
                        states.binary_sensor.window_office_openclose_sensor] %}
      {{ sensors | selectattr('state', 'eq', 'on') | list | count }}
  - unique_id: open_windows_and_doors
    name: Open windows and doors
    state: >
      {{ states.sensor.open_windows_and_doors_upstairs.state | int + states.sensor.open_windows_and_doors_downstairs.state | int }}

- sensor:
  - unique_id: count_automations
    name: Automations count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.automation | count }}
  - unique_id: count_device_trackers
    name: Device Trackers count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.device_tracker | count }}
  - unique_id: count_lights
    name: Lights count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.light | count }}
  - unique_id: count_binary_sensors
    name: Binary Sensors count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.binary_sensor | count }}
  - unique_id: count_sensors
    name: Sensors count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.sensor | count }}
  - unique_id: count_switches
    name: Switches count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.switch | count }}
  - unique_id: count_zones
    name: Zone count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.zone | count }}
  - unique_id: count_cameras
    name: Camera count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.camera | count }}
  - unique_id: count_media_players
    name: Media Players count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.media_player | count }}
  - unique_id: count_scripts
    name: Scripts count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.script | count }}
  - unique_id: count_locks
    name: Locks count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.lock | count }}
  - unique_id: count_vacuums
    name: Vacuum count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.vacuum | count }}
  - unique_id: count_zwaves
    name: ZWave count
    state: >
      {% set dummy = states("sensor.date") %}
      {{ states.zwave | count }}
