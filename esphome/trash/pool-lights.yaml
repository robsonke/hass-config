substitutions:
  ip: !secret pool_lights_ip

esphome:
  name: "pool-lights"
  friendly_name: pool-lights

<<: !include .common.yaml

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# ESP32 GPIO PIN 16 to TXD PIN 17 to RXD
# This controls the Duratech PLP-REM-350
# https://www.duratech.be/en/controller/plp-rem-350
uart:
  id: mod_bus
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

# grab the power sensor from HA to track if lights are on/off
# since we have no state
sensor:
  - platform: homeassistant
    name: "Power Usage Pool Lights"
    entity_id: sensor.pool_shelly_3em_phase_c_active_power


output:
  - platform: template
    type: binary
    id: light_relay
    write_action:
      - if:
          condition:
            light.is_on: pool_lights
          then:
            - uart.write:
                id: mod_bus
                data: 'PL1'
          else:
            - uart.write:
                id: mod_bus
                data: 'PL0'

  - platform: template
    type: float
    id: output_light_red
    write_action:
      - logger.log: "Rob: set red color"
      # - uart.write:
      #     id: mod_bus
      #     data: 'PC255000000'
          


            
light:
  # - platform: binary
  #   id: pool_lights
  #   name: Pool Lights
  #   output: light_relay
  - platform: rgb
    id: pool_lights
    name: Pool Lights
    red: output_light_red
    green: output_light_red
    blue: output_light_red
    on_turn_on:
      - uart.write:
          id: mod_bus
          data: 'PL1'
      - logger.log: "Rob: Light Turned On!"
    on_turn_off:
      - logger.log: "Rob: Light Turned Off!"


# light:
#   - platform: rgbww
#     name: "Pool Lights"
#     red: output_light_red
#     green: output_light_green
#     blue: output_light_blue
#     cold_white: output_light_cold
#     warm_white: output_light_warm
#     cold_white_color_temperature: 6536 K
#     warm_white_color_temperature: 2000 K
#     restore_mode: RESTORE_DEFAULT_OFF
#     on_turn_on:
#       - uart.write:
#           id: mod_bus
#           data: 'PL1'
#     on_turn_off:
#       - uart.write:
#           id: mod_bus
#           data: 'PL0'

button:
  - platform: template
    name: Test Lights On
    id: button_lights_on
    on_press:
      - uart.write:
          id: mod_bus
          data: 'PL1'
  - platform: template
    name: Test Lights Off
    id: button_lights_off
    on_press:
      - uart.write:
          id: mod_bus
          data: 'PL0'
  - platform: template
    name: Test Lights Next
    id: button_lights_next
    on_press:
      - uart.write:
          id: mod_bus
          data: 'PsU'

# switch:
#   - platform: modbus_controller
#     modbus_controller_id: ctrl1
#     id: enable_load_test
#     register_type: coil
#     address: 1
#     name: "enable load test mode"
    # write_lambda: |-
    #   ESP_LOGD("main","Modbus Switch incoming state = %f",x);
    #   // return false ; // use this to just change the value
    #   payload.push_back(504C31);
    #   return true;

# text_sensor:
#   - platform: modbus_controller
#     modbus_controller_id: ctrl1
#     id: reg_1002_text
#     bitmask: 0
#     register_type: holding
#     address: 1002
#     raw_encode: HEXBYTES
#     name: Register 1002 (Text)
#     lambda: |-
#       uint16_t value = modbus_controller::word_from_hex_str(x, 0);
#       ESP_LOGD("main", "Robb %s", value);
      
#       return x;

# modbus:
#   id: modbus1
#   uart_id: mod_bus

# modbus_controller:
#   - id: ctrl1
#     address: 0x00
#     modbus_id: modbus1
#     setup_priority: -10
#     update_interval: 5s

# output:
#   - platform: modbus_controller
#     modbus_controller_id: ctrl1
#     id: battery_capacity_output
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Output incoming value = %f",x);
#       uint16_t b_capacity = x ;
#       payload.push_back(b_capacity);
#       return x * 1.0 ;
#     address: 0x01
#     value_type: U_WORD

# sensor:
#   - platform: modbus_controller
#     modbus_controller_id: ctrl1
#     name: "Test Sensor"
#     id: test_sensor
#     register_type: holding
#     address: 0x01
#     # unit_of_measurement: "AH"
#     value_type: U_WORD
#     lambda: |-
#       ESP_LOGD("Modbus Sensor Lambda","Got new data" );
#       return 1;

# sensor:
#   - platform: modbus_controller
#     modbus_controller_id: a8s
#     name: "Voltage"
#     id: modbus_voltage
#     register_type: holding
#     address: 0x64
#     unit_of_measurement: "V"
#     value_type: FP32
#     accuracy_decimals: 2