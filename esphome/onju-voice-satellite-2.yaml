substitutions:
  name: "onju-voice-sat-2"
  friendly_name: "Onju Voice Satellite 2"
  project_version: "1.1.0"
  device_description: "Onju Voice Satellite 2 with ESPHome software"
  error_sound_url: "http://192.168.0.40:8123/local/sounds/error.mp3" # Error #8 by UNIVERSFIELD https://freesound.org/people/UNIVERSFIELD/sounds/734442/
  timer_finished_sound_url: "http://192.168.0.40:8123/local/sounds/timer_finished.mp3" # New Notification #6 by UNIVERSFIELD https://freesound.org/people/UNIVERSFIELD/sounds/734445/
  # Phases of the Voice Assistant
  # IDLE: The voice assistant is ready to be triggered by a wake-word
  voice_assist_idle_phase_id: '1'
  # LISTENING: The voice assistant is ready to listen to a voice command (after being triggered by the wake word)
  voice_assist_listening_phase_id: '2'
  # THINKING: The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '3'
  # REPLYING: The voice assistant is replying to the command
  voice_assist_replying_phase_id: '4'
  # NOT_READY: The voice assistant is not ready
  voice_assist_not_ready_phase_id: '10'
  # ERROR: The voice assistant encountered an error
  voice_assist_error_phase_id: '11'
  # MUTED: The voice assistant is muted and will not reply to a wake-word
  voice_assist_muted_phase_id: '12'


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  #name_add_mac_suffix: true
  project:
    name: tetele.onju_voice_satellite
    version: "${project_version}"
  min_version: 2024.7.3
  platformio_options:
    board_build.flash_mode: dio
    board_upload.maximum_size: 16777216
  # on_boot:
  #   then:
      # - voice_assistant.start_continuous
      # - light.turn_on:
      #     id: top_led
      #     effect: slow_pulse
      #     red: 100%
      #     green: 60%
      #     blue: 0%
      # - light.turn_on:
      #     id: top_led
      #     effect: pulse
      #     red: 0%
      #     green: 100%
      #     blue: 0%
      # - light.turn_on:
      #     id: top_led
      #     effect: none
      #     red: 0%
      #     green: 100%
      #     blue: 0%
      # - delay: 1s
      # - script.execute: reset_led
      
external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [adf_pipeline, i2s_audio]
# dashboard_import:
#   package_import_url: github://tetele/onju-voice-satellite/esphome/onju-voice.yaml@main

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  flash_size: 16MB
  framework:
    # TODO arduino?
    type: esp-idf
    version: recommended
    sdkconfig_options:
      # need to set a s3 compatible board for the adf-sdk to compile
      # board specific code is not used though
      CONFIG_ESP32_S3_BOX_BOARD: "y"
      CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: "16"
      CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: "512"
      CONFIG_TCPIP_RECVMBOX_SIZE: "512"

      CONFIG_TCP_SND_BUF_DEFAULT: "65535"
      CONFIG_TCP_WND_DEFAULT: "512000"
      CONFIG_TCP_RECVMBOX_SIZE: "512"

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  hardware_uart : UART0
  level: VERBOSE
  logs:
    micro_wake_word: WARN

# Allow OTA updates
ota:
  password: !secret wifi_password
  platform: esphome
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.0.159
    gateway: 192.168.0.1
    subnet: 255.255.255.0

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

api:
  encryption:
    key: !secret api_key
  # services:
  #   - service: start_va
  #     then:
  #       - voice_assistant.start
  #   - service: stop_va
  #     then:
  #       - voice_assistant.stop
    # - service: notification_on
    #   then:
    #     - script.execute: turn_on_notification
    # - service: notification_clear
    #   then:
    #     - script.execute: clear_notification

globals:
  # Global initialisation variable. Initialized to true and set to false once everything is connected. Only used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  # Global variable tracking the phase of the voice assistant (defined above). Initialized to not_ready
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}

# interval:
#   - interval: 1s
#     then:
#       - script.execute:
#           id: calibrate_touch
#           button: 0
#       - script.execute:
#           id: calibrate_touch
#           button: 1
#       - script.execute:
#           id: calibrate_touch
#           button: 2

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO13
    i2s_bclk_pin: GPIO18
    access_mode: duplex
  # - id: i2s_in
  #   i2s_lrclk_pin: GPIO5
  #   i2s_bclk_pin: GPIO6
  # - id: i2s_out
  #   i2s_lrclk_pin: GPIO46
  #   i2s_bclk_pin: GPIO9

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO12

  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO17
    pdm: false
    channel: left
    sample_rate: 16000
    bits_per_sample: 32bit

# adf_pipeline:
#   - platform: i2s_audio
#     type: audio_out
#     id: adf_i2s_out
#     i2s_audio_id: i2s_shared
#     i2s_dout_pin: GPIO12
#     sample_rate: 16000
#     adf_alc: true
#     alc_max: .5
#     bits_per_sample: 32bit
#     fixed_settings: true
#     channel: left

#   - platform: i2s_audio
#     type: audio_in
#     id: adf_i2s_in
#     i2s_audio_id: i2s_shared
#     i2s_din_pin: GPIO17
#     channel: left
#     pdm: false
#     sample_rate: 16000
#     bits_per_sample: 32bit
#     fixed_settings: true

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3-dev_media_player
    keep_pipeline_alive: false
    internal: false
    pipeline:
      - self
      - adf_i2s_out
# media_player:
#   - platform: i2s_audio
#     name: None
#     id: onju_out
#     dac_type: external
#     i2s_dout_pin: GPIO12
#     mode: mono
#     mute_pin:
#       number: GPIO21
#       inverted: false
    # on_state:
    #   then:
    #     - lambda: |-
    #         static float old_volume = -1;
    #         float new_volume = id(onju_out).volume;
    #         if(abs(new_volume-old_volume) > 0.0001) {
    #           if(old_volume != -1) {
    #             id(show_volume)->execute();
    #           }
    #         }
    #         old_volume = new_volume;

microphone:
  - platform: adf_pipeline
    id: adf_microphone
    gain_log2: 3
    keep_pipeline_alive: false
    pipeline:
      - adf_i2s_in
      - self
# microphone:
#   - platform: i2s_audio
#     id: onju_microphone
#     i2s_din_pin: GPIO17
#     adc_type: external
#     pdm: true
#     on_data:
#       - logger.log:
#           format: "Received %d bytes"
#           args: ['x.size()']


micro_wake_word:
  models:
    #- model: https://github.com/kahrendt/microWakeWord/releases/download/v2.1_models/alexa.json
    - model: https://github.com/kahrendt/microWakeWord/releases/download/v2.1_models/okay_nabu.json
  on_wake_word_detected:
      - media_player.stop:
      - light.turn_on:
          id: leds
          effect: "Slow Pulse"
      - voice_assistant.start:

voice_assistant:
  microphone: adf_microphone
  media_player: adf_media_player

  use_wake_word: false
  #vad_threshold: 3

  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 4.0

  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.start:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - voice_assistant.stop
    - micro_wake_word.stop

  on_end:
      then:
        # - light.turn_off:
        #     id: led
        - voice_assistant.stop
        - wait_until:
            not:
              voice_assistant.is_running:
        - if:
            condition:
              switch.is_on: use_wake_word
            then:
              - micro_wake_word.start:
  on_error:
      then:
        - voice_assistant.stop
        - wait_until:
            not:
              voice_assistant.is_running:
        - if:
            condition:
              switch.is_on: use_wake_word
            then:
              - micro_wake_word.start:

switch:
  - platform: template
    name: Enable Voice Assistant
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:assistant
    # When the switch is turned on (on Home Assistant):
    # Start the voice assistant component
    # Set the correct phase and run the script to refresh the LED status
    on_turn_on:
      - logger.log: "switch on"
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - logger.log: "condition 1"
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - voice_assistant.stop
            - delay: 1s
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - logger.log: "Starting MWW"
                  #- voice_assistant.start_continuous
                  - micro_wake_word.start:
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - voice_assistant.stop
            - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

  - platform: template
    name: Pipeline
    id: pipeline_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

    on_turn_off:
      - media_player.stop

    on_turn_on:
      - media_player.play_media: "https://dl.espressif.com/dl/audio/ff-16b-2c-44100hz.mp3"


esp32_touch:
  setup_mode: false
  sleep_duration: 2ms
  measurement_duration: 800us
  low_voltage_reference: 0.8V
  high_voltage_reference: 2.4V

  filter_mode: IIR_16
  debounce_count: 2
  noise_threshold: 0
  jitter_step: 0
  smooth_mode: IIR_2

  denoise_grade: BIT8
  denoise_cap_level: L0

light:
  - platform: esp32_rmt_led_strip
    id: leds
    pin: GPIO11
    chipset: SK6812
    num_leds: 4
    rgb_order: grb
    rmt_channel: 0
    default_transition_length: 0s
    disabled_by_default: false
    gamma_correct: 2.8
  - platform: partition
    id: left_led
    segments:
      - id: leds
        from: 0
        to: 0
    default_transition_length: 100ms
  - platform: partition
    id: top_led
    segments:
      - id: leds
        from: 1
        to: 2
    default_transition_length: 100ms
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%
  - platform: partition
    id: right_led
    segments:
      - id: leds
        from: 3
        to: 3
    default_transition_length: 100ms

# script:
#   - id: reset_led
#     then:
#       - if:
#           condition:
#             - lambda: return id(notification);
#           then:
#             - light.turn_on:
#                 id: top_led
#                 blue: 100%
#                 red: 100%
#                 green: 0%
#                 brightness: 100%
#                 effect: slow_pulse
#           else:
#             - if:
#                 condition:
#                   and:
#                     # - switch.is_on: use_wake_word
#                     # - switch.is_on: flicker_wake_word
#                     # - binary_sensor.is_off: mute_switch
#                 then:
#                   - light.turn_on:
#                       id: top_led
#                       blue: 100%
#                       red: 100%
#                       green: 0%
#                       brightness: 60%
#                       effect: listening_ww
#                 else:
#                   - light.turn_off: top_led

#   - id: turn_on_notification
#     then:
#       - lambda: id(notification) = true;
#       - script.execute: reset_led

#   - id: clear_notification
#     then:
#       - lambda: id(notification) = false;
#       - script.execute: reset_led

#   - id: set_volume
#     mode: restart
#     parameters:
#       volume: float
#     then:
#       - media_player.volume_set:
#           id: onju_out
#           volume: !lambda return clamp(id(onju_out).volume+volume, 0.0f, 1.0f);

#   - id: show_volume
#     mode: restart
#     then:
#       - light.turn_on:
#           id: top_led
#           effect: show_volume
#       - delay: 1s
#       - script.execute: reset_led

#   - id: turn_on_wake_word
#     then:
#       - if:
#           condition:
#             and:
#               - binary_sensor.is_off: mute_switch
#               - switch.is_on: use_wake_word
#           then:
#             - lambda: id(va).set_use_wake_word(true);
#             - if:
#                 condition:
#                   not:
#                     media_player.is_idle:
#                 then:
#                   - media_player.stop:
#             - if:
#                 condition:
#                   not:
#                     - voice_assistant.is_running
#                 then:
#                   - voice_assistant.start_continuous
#             - script.execute: reset_led
#           else:
#             - logger.log:
#                 tag: "turn_on_wake_word"
#                 format: "Trying to start listening for wake word, but %s"
#                 args:
#                   [
#                     'id(mute_switch).state ? "mute switch is on" : "use wake word toggle is off"',
#                   ]
#                 level: "INFO"

#   - id: turn_off_wake_word
#     then:
#       - voice_assistant.stop
#       - lambda: id(va).set_use_wake_word(false);
#       - script.execute: reset_led

#   - id: calibrate_touch
#     parameters:
#       button: int
#     then:
#       - lambda: |-
#           static byte thresh_indices[3] = {0, 0, 0};
#           static uint32_t sums[3] = {0, 0, 0};
#           static byte qsizes[3] = {0, 0, 0};
#           static int consecutive_anomalies_per_button[3] = {0, 0, 0};

#           uint32_t newval;
#           uint32_t* calibration_values;
#           switch(button) {
#             case 0:
#               newval = id(volume_down).get_value();
#               calibration_values = id(touch_calibration_values_left);
#               break;
#             case 1:
#               newval = id(action).get_value();
#               calibration_values = id(touch_calibration_values_center);
#               break;
#             case 2:
#               newval = id(volume_up).get_value();
#               calibration_values = id(touch_calibration_values_right);
#               break;
#             default:
#               ESP_LOGE("touch_calibration", "Invalid button ID (%d)", button);
#               return;
#           }

#           if(newval == 0) return;

#           //ESP_LOGD("touch_calibration", "[%d] qsize %d, sum %d, thresh_index %d, consecutive_anomalies %d", button, qsizes[button], sums[button], thresh_indices[button], consecutive_anomalies_per_button[button]);
#           //ESP_LOGD("touch_calibration", "[%d] New value is %d", button, newval);

#           if(qsizes[button] == 5) {
#             float avg = float(sums[button])/float(qsizes[button]);
#             if((fabs(float(newval)-avg)/avg) > id(thresh_percent)) {
#               consecutive_anomalies_per_button[button]++;
#               //ESP_LOGD("touch_calibration", "[%d] %d anomalies detected.", button, consecutive_anomalies_per_button[button]);
#               if(consecutive_anomalies_per_button[button] < 10)
#                 return;
#             } 
#           }

#           //ESP_LOGD("touch_calibration", "[%d] Resetting consecutive anomalies counter.", button);
#           consecutive_anomalies_per_button[button] = 0;


#           if(qsizes[button] == 5) {
#             //ESP_LOGD("touch_calibration", "[%d] Queue full, removing %d.", button, id(touch_calibration_values)[thresh_indices[button]]);
#             sums[button] -= (uint32_t) *(calibration_values+thresh_indices[button]);// id(touch_calibration_values)[thresh_indices[button]];
#             qsizes[button]--;
#           }
#           *(calibration_values+thresh_indices[button]) = newval;
#           sums[button] += newval;
#           qsizes[button]++;
#           thresh_indices[button] = (thresh_indices[button] + 1) % 5;

#           //ESP_LOGD("touch_calibration", "[%d] Average value is %d", button, sums[button]/qsizes[button]);
#           uint32_t newthresh = uint32_t((sums[button]/qsizes[button]) * (1.0 + id(thresh_percent)));
#           //ESP_LOGD("touch_calibration", "[%d] Setting threshold %d", button, newthresh);

#           switch(button) {
#             case 0:
#               id(volume_down).set_threshold(newthresh);
#               break;
#             case 1:
#               id(action).set_threshold(newthresh);
#               break;
#             case 2:
#               id(volume_up).set_threshold(newthresh);
#               break;
#             default:
#               ESP_LOGE("touch_calibration", "Invalid button ID (%d)", button);
#               return;
#           }

# switch:
#   - platform: template
#     name: Use Wake Word
#     id: use_wake_word
#     optimistic: true
#     restore_mode: RESTORE_DEFAULT_ON
#     on_turn_on:
#       - script.execute: turn_on_wake_word
#     on_turn_off:
#       - script.execute: turn_off_wake_word
#   - platform: template
#     name: Wake Word Listening Light
#     id: flicker_wake_word
#     entity_category: config
#     optimistic: true
#     restore_mode: RESTORE_DEFAULT_ON
#     on_turn_on:
#       - script.execute: reset_led
#     on_turn_off:
#       - script.execute: reset_led