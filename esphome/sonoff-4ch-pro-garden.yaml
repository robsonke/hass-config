# Based on https://github.com/bruxy70/Irrigation-with-display/ but without the display
# 1: terras_midden
# 2: terras_zijkant
# 3: achter_rechts
# 4: achter_links

substitutions:
  device_name: sonoff-4ch-pro-irrigation
  friendly_name: Sonoff 4ch pro Irrigation
  time_timezone: "Europe/Amsterdam"
  ip: !secret sonoff4chpro_garden_ip
  project: Garden irrigation

<<: !include .common.yaml
  
esphome:
  name: ${device_name}
  includes: irrigation.h
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -100.0
    then:
      # Set light to half brightness when first ready.
      - light.turn_on:
          id: status_led
          brightness: 50%

      # Wait to check for a Home Assistant API connection.
      - delay: 15s
      - if:
          condition:
            api.connected:
          then:
            # If connected, then flash the LED, and leave it at full brightness.
            - logger.log: "$project is connected to the Home Assistant API!"
            - light.turn_on:
                id: status_led
                brightness: 100%
            - delay: 0.5s
            - light.turn_off: status_led
            - delay: 0.5s
            - light.turn_on:
                id: status_led
                brightness: 100%
            - delay: 0.5s
            - light.turn_off: status_led
            - delay: 0.5s
            - light.turn_on:
                id: status_led
                brightness: 100%
            - delay: 0.5s
            - light.turn_off: status_led
            - delay: 0.5s
            - light.turn_on:
                id: status_led
                brightness: 100%
  # Turn off the LED when the device is shutting down (like for a firmware update).
  on_shutdown:
    then:
      - light.turn_off: status_led
  platformio_options:
    build_flags: 
      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=16384

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: next_valve
      then:
        - sprinkler.next_valve: controller

ota:
  password: "8789ff569642774d2e2ad47f88ffa234"

sprinkler:
  - id: controller
    main_switch: "Irrigation Main Switch"
    auto_advance_switch: "Auto Advance - Next Zone"
    valve_overlap: 5s
    valves:
      - valve_switch: "Valve 1 - Terras Midden"
        enable_switch: "Valve 1 - Terras Midden Enabled"
        run_duration: 2700s
        valve_switch_id: irrigation_zone_terras_midden
      - valve_switch: "Valve 2 - Terras Zijkant"
        enable_switch: "Valve 2 - Terras Zijkant Enabled"
        run_duration: 2700s
        valve_switch_id: irrigation_zone_terras_zijkant
      - valve_switch: "Valve 3 - Achter Rechts"
        enable_switch: "Valve 3 - Achter Rechts Enabled"
        run_duration: 2700s
        valve_switch_id: irrigation_zone_achter_rechts
      - valve_switch: "Valve 4 - Achter Links"
        enable_switch: "Valve 4 - Achter Links Enabled"
        run_duration: 2700s
        valve_switch_id: irrigation_zone_achter_links

# let the buttons toggle the zones
binary_sensor:
  - platform: gpio
    id: button1
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "Sonoff 4CH Irrigation Button 1"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        lambda: 'toggle(1, irrigation_zone_terras_midden, controller);'
  - platform: gpio
    id: button2
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: true
    name: "Sonoff 4CH Irrigation Button 2"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        lambda: 'toggle(2, irrigation_zone_terras_zijkant, controller);'
  - platform: gpio
    id: button3
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: true
    name: "Sonoff 4CH Irrigation Button 3"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        lambda: 'toggle(3, irrigation_zone_achter_rechts, controller);'
  - platform: gpio
    id: button4
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    name: "Sonoff 4CH Irrigation Button 4"
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        lambda: 'toggle(4, irrigation_zone_achter_links, controller);'

  - platform: status
    name: "Sonoff 4CH Status"

switch:
  # a restart entity
  - platform: restart
    name: "Sonoff 4CH Irrigation Restart"

  # the actual solenoid switches
  - platform: gpio
    name: "Irrigation Zone Terras midden"
    pin: GPIO12
    id: irrigation_zone_terras_midden
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    name: "Irrigation Zone Terras zijkant"
    pin: GPIO5
    id: irrigation_zone_terras_zijkant
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    name: "Irrigation Zone Achter Rechts"
    pin: GPIO4
    id: irrigation_zone_achter_rechts
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    name: "Irrigation Zone Achter links"
    pin: GPIO15
    id: irrigation_zone_achter_links
    restore_mode: RESTORE_DEFAULT_OFF

sensor:  
  - platform: uptime
    name: Sonoff 4CH Irrigation Uptime
    unit_of_measurement: h
    filters:
      - lambda: return int((x + 1800.0) / 3600.0);
  - platform: wifi_signal
    name: Sonoff 4CH Irrigation WiFi Signal
    update_interval: 30s

number:
  - id: irrigation_zone_terras_midden_duration
    platform: template
    name: "Sproeiduur Zone terras midden"
    min_value: 1
    max_value: 60
    step: 1.0
    mode: box
    lambda: 'return id(controller).valve_run_duration(0) / 60;'
    set_action:
      - sprinkler.set_valve_run_duration:
          id: controller
          valve_number: 0
          run_duration: !lambda "return x * 60;"
  - id: irrigation_zone_terras_zijkant_duration
    platform: template
    name: "Sproeiduur Zone terras zijkant"
    min_value: 1
    max_value: 60
    step: 1.0
    mode: box
    lambda: 'return id(controller).valve_run_duration(1) / 60;'
    set_action:
      - sprinkler.set_valve_run_duration:
          id: controller
          valve_number: 1
          run_duration: !lambda 'return x * 60;'
  - id: irrigation_zone_achter_rechts_duration
    platform: template
    name: "Sproeiduur Zone achter rechts"
    min_value: 1
    max_value: 60
    step: 1.0
    mode: box
    lambda: 'return id(controller).valve_run_duration(2) / 60;'
    set_action:
      - sprinkler.set_valve_run_duration:
          id: controller
          valve_number: 2
          run_duration: !lambda 'return x * 60;'
  - id: irrigation_zone_achter_links_duration
    platform: template
    name: "Sproeiduur Zone achter links"
    min_value: 1
    max_value: 60
    step: 1.0
    mode: box
    lambda: 'return id(controller).valve_run_duration(3) / 60;'
    set_action:
      - sprinkler.set_valve_run_duration:
          id: controller
          valve_number: 3
          run_duration: !lambda 'return x * 60;'

output:
  # Register the blue LED as a dimmable output
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: true

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: "Sonoff 4CH Irrigation Blue LED"
    id: status_led
    output: blue_led