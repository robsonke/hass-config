substitutions:
  devicename: m5stack-pool
  ip: !secret m5stack_pool_ip
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  api_key: !secret api_key

esphome:
  name: ${devicename}
  friendly_name: ${devicename}

  includes:
    - custom_components/axp192/axp192.h
  
# external_components:
  # - source: github://pionizer/pionizer-axp192
  #   components: [axp192]
  # - source:
  #     type: git
  #     url: https://gitlab.com/geiseri/esphome_extras.git
  #   refresh: 0s
  # - source:
  #     type: git
  #     url: https://github.com/martydingo/esphome-axp192
  #   refresh: 0s

  # includes:
  #   - custom_components/axp192/axp192.h
  #   - custom_components/st7735/st7735.h

  

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino

  

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: ${api_key}

ota:
  password: ${password}

wifi:
  ssid: ${ssid}
  password: ${password}
  manual_ip:
    static_ip: ${ip}
    gateway: 192.168.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "M5Stack-Pool Fallback Hotspot"
    password: "Tn0FWyHmrtpj"

captive_portal:

web_server:
  port: 80

time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO38
  
i2c:
  - id: i2c_bus
    sda: GPIO21
    scl: GPIO22
    scan: True

uart:
  id: mod_bus
  tx_pin: 14
  rx_pin: 13
  baud_rate: 9600
  stop_bits: 1

modbus:
  id: modbus1
  flow_control_pin: 5

modbus_controller:
  - id: modbuscontrollerm5stack
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
 
#  sensor:
#    - platform: modbus_controller
#      modbus_controller_id: modbuscontrollerm5stack
#      name: "Woonkamer Temperatuur"
#      id: woonkamer_temperatuur
#      register_type: holding
#      address: 0x40001
#      value_type: U_WORD

sensor:
  - platform: axp192
    model: M5CORE2
    address: 0x34
    i2c_id: i2c_bus
    update_interval: 30s
    brightness: 100%
    battery_level:
      name: "Battery Level"
      id: "m5stack_pool_battery_level"
  - platform: wifi_signal
    name: WiFi Signal
    id: wifi_dbm
    update_interval: 120s
  - platform: uptime
    name: Uptime
    update_interval: 120s


font:
  - file: "gfonts://Roboto"
    id: font_roboto_20
    size: 20
color:
  - id: color_red
    red: 100%
    green: 3%
    blue: 5%

# display:
#   - platform: ili9xxx
#     model: M5STACK
#     cs_pin: 14
#     dc_pin: 27
#     lambda: |-
#       it.line(20, 20, 200, 200);
    #it.print(80, 0, id(font_roboto_20), TextAlign::TOP_CENTER, "M5Core Test");

# builtin 320px x 240px
display:
  - platform: ili9xxx
    model: M5STACK
    cs_pin: GPIO5
    dc_pin: GPIO15
    rotation: 0
    id: core2_display
    reset_pin: 33
    lambda: |-
      it.fill(Color::BLACK);
      it.print(0, 0, id(font_roboto_20), id(color_red), TextAlign::TOP_LEFT, "Hello World!");

# interval:
#   - interval: 2s
#     then:
#       - display.page.show_next: core2_display
#       - component.update: core2_display

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic

button:
  - platform: restart
    name: "Restart"
    entity_category: diagnostic